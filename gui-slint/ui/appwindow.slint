import { Button, ComboBox, Slider, SpinBox, ListView } from "std-widgets.slint";
import { DiamondSquarePanel, DiamondSquareParams } from "ds_panel.slint";
import { PerlinPanel, PerlinParams } from "perlin_panel.slint";
import { GeneratorType } from "generator_type.slint";
import { GeneratorLayerInfo, GeneratorLayer } from "generator_layer.slint";

export component AppWindow inherits Window {
    width: 1000px;
    height: 600px;
    title: "Terrain Generator";
    in-out property <[GeneratorLayerInfo]> layers;
    in-out property <int> rows: 512;
    in-out property <int> cols: 512;
    in-out property <PerlinParams> perlin_params: { seed: 0, scale: 1.0, cell_size: 16 };
    in-out property <DiamondSquareParams> ds_params: { seed: 0, roughness: 1 };
    property <string> selected_algorithm: "Diamond-Square";
    in property <image> heightmap_image;
    callback invoke_generate(algorithm: GeneratorType);
    callback add_layer();

    GridLayout{
        VerticalLayout { 
            width: 25%;

            Text { text: "Layers:"; }

            Rectangle {
                background: #c0c0c0;  
                border-radius: 6px;
                clip: true;            

                ListView {
                    

                    for layer[i] in root.layers: GeneratorLayer { layer_info: layer; } 
                }
            }
           
            Button {
                text: "Add Layer";
                clicked => {
                    root.add_layer();
                }
            }
        }
        VerticalLayout {
            
            Text{
                text: "Terrain size";
            }
            GridLayout{
                Text{
                    text: "width";
                }
                SpinBox {
                    minimum: 1;
                    maximum: 2049;
                    step-size: 1;
                    value: root.cols;
                    edited => {
                        root.cols = self.value;
                    }
                }

                Text{
                    text: "height";
                }
                SpinBox {
                    minimum: 1;
                    maximum: 2049;
                    step-size: 1;
                    value: root.rows;
                    edited => {
                        root.rows = self.value;
                    }
                }
            }

        }

        Image {
            source: root.heightmap_image;
            width: 512px;
            height: 512px;
        }
    }
}
