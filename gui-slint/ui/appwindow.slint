import { Button, ComboBox, Slider, SpinBox, ListView } from "std-widgets.slint";
import { DiamondSquarePanel, DiamondSquareParams } from "ds_panel.slint";
import { PerlinPanel, PerlinParams } from "perlin_panel.slint";
import { GeneratorType } from "generator_type.slint";
import { GeneratorLayerInfo, GeneratorLayer } from "generator_layer.slint";
import { DebugHelper } from "debug.slint";
import { ExportPanel } from "export_panel.slint";
import { ExportAs } from "export_type.slint";
import { HydraulicErosionPanel, HEParams } from "hydraulic_erosion_panel.slint";
import { LayersPanel } from "layers_panel.slint";

export component AppWindow inherits Window {
    width: 1500px;
    height: 600px;
    title: "Terrain Generator";
    in-out property <int> rows: 512;
    in-out property <int> cols: 512;
    in-out property <[GeneratorLayerInfo]> layers;
    in-out property <int> selected_layer_index: 0;
    in-out property <string> raw_selected_algo;

    in-out property <PerlinParams> current_perlin_params: { seed: 0, scale: 1.0, cell_size: 16 };
    in-out property <DiamondSquareParams> current_ds_params: { seed: 0, roughness: 1 };
    in-out property <GeneratorType> selected_algorithm;

    in-out property <image> heightmap_image;
    in-out property <bool> ready_for_combination: false;
    in-out property <bool> terrain_ready: false;
    out property <ExportAs> export_type;
    callback invoke_generate(algorithm: GeneratorType);
    callback size_updated();
    callback add_layer();
    callback combine_layers();
    callback save_terrain(exportAs: ExportAs);
    callback select_layer(index: int);
    callback update_layer(layer_info: GeneratorLayerInfo, index: int);
    callback update_ds_params(params: DiamondSquareParams);
    callback update_perlin_params(params: PerlinParams);
    callback apply_hydraulic_erosion(params: HEParams);

    GridLayout{
        VerticalLayout { 
            width: 25%;

            Text{
                text: "Terrain size";
            }
            GridLayout{
                Text{
                    text: "width";
                }
                SpinBox {
                    minimum: 1;
                    maximum: 2049;
                    step-size: 1;
                    value: root.cols;
                    edited => {
                        root.cols = self.value;
                        root.heightmap_image = @image-url("");
                        root.size_updated();
                    }
                }

                Text{
                    text: "height";
                }
                SpinBox {
                    minimum: 1;
                    maximum: 2049;
                    step-size: 1;
                    value: root.rows;
                    edited => {
                        root.rows = self.value;
                        root.heightmap_image = @image-url("");
                        root.size_updated();
                    }
                }
            }
            DebugHelper {
                algo: root.selected_algorithm;
                exportAs: root.export_type;
                layer: root.selected_layer_index;
            }

            LayersPanel {
                layers <=> root.layers;
                selected_layer_index <=> root.selected_layer_index;
                ready_for_combination: root.ready_for_combination;

                add_layer => {
                    root.add_layer();
                    root.ready_for_combination = false;
                }
                combine_layers => {
                    root.combine_layers();
                }
                select_layer(index) => {
                    root.select_layer(index);
                }
                update_layer(layer-info, index) => {
                    root.update_layer(layer-info, index);
                }
            }
        }
        VerticalLayout {
            for selected_layer_index in (root.selected_layer_index >= 0 ? [root.selected_layer_index] : []) : 
                Rectangle {
                    if root.selected_algorithm == GeneratorType.perlin : PerlinPanel { 
                        params <=> root.current_perlin_params;

                        params_changed => {
                            if root.selected_layer_index >= 0 {
                                root.update_perlin_params(self.params);
                            }
                        }
                    }

                    if root.selected_algorithm == GeneratorType.diamondsquare : DiamondSquarePanel {
                        params <=> root.current_ds_params;

                        params_changed => {
                            if root.selected_layer_index >= 0 {
                                root.update_ds_params(self.params);
                            }
                        }
                    }
                }

            Rectangle {}

            Button {
                text: "Generate";
                enabled: root.selected_layer_index >= 0;

                clicked => {
                    root.invoke_generate(root.selected_algorithm);
                }
            }
        }

        VerticalLayout{
            Image {
                source: root.heightmap_image;
                width: 512px;
                height: 512px;
            }
            Rectangle {}
            ExportPanel {
                ready: root.terrain_ready;
                exportType <=> root.export_type;
                clicked(exportAs) => {
                    root.save_terrain(exportAs);
                }
            }
        }

        VerticalLayout{
            HydraulicErosionPanel {
                active: root.terrain_ready;
                clicked => {root.apply_hydraulic_erosion(self.params);}
            }
        }
    }
}
